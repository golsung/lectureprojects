import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class Grader7Test {

    @DisplayName("범위에 벗어난 점수가 입력된 경우 테스트")
    @Nested
    class WhenInvalidScoresEntered {
        @DisplayName("중간 점수가 0보다 작은 경우 InvalidRangeException 발생")
        @Test
        public void should_RaiseInvalidRangeException_ForMidScoreLessThan0pts() {
            double midScore = -10;
            double finalScore = 90;
            double hwScore = 95;
            Grader grader = new Grader();
            assertThrows(InvalidRangeException.class, () -> {
                grader.computeGrade(midScore, finalScore, hwScore);
            });
        }

        @DisplayName("중간 점수가 100보다 큰 경우 InvalidRangeException 발생")
        @Test
        public void should_RaiseInvalidRangeException_ForMidScoreMoreThan100pts() {
            double midScore = 110;
            double finalScore = 90;
            double hwScore = 95;
            Grader grader = new Grader();
            assertThrows(InvalidRangeException.class, () -> {
                grader.computeGrade(midScore, finalScore, hwScore);
            });
        }

        @DisplayName("기말 점수가 0보다 작은 경우 InvalidRangeException 발생")
        @Test
        public void should_RaiseInvalidRangeException_ForFinalScoreLessThan0pts() {
            double midScore = 90;
            double finalScore = -90;
            double hwScore = 95;
            Grader grader = new Grader();
            assertThrows(InvalidRangeException.class, () -> {
                grader.computeGrade(midScore, finalScore, hwScore);
            });
        }

        @DisplayName("기말 점수가 100보다 큰 경우 InvalidRangeException 발생")
        @Test
        public void should_RaiseInvalidRangeException_ForFinalScoreMoreThan100pts() {
            double midScore = 90;
            double finalScore = 190;
            double hwScore = 95;
            Grader grader = new Grader();
            assertThrows(InvalidRangeException.class, () -> {
                grader.computeGrade(midScore, finalScore, hwScore);
            });
        }

        @DisplayName("과제 점수가 0보다 작은 경우 InvalidRangeException 발생")
        @Test
        public void should_RaiseInvalidRangeException_ForHwScoreLessThan0pts() {
            double midScore = 10;
            double finalScore = 90;
            double hwScore = -95;
            Grader grader = new Grader();
            assertThrows(InvalidRangeException.class, () -> {
                grader.computeGrade(midScore, finalScore, hwScore);
            });
        }

        @DisplayName("과제 점수가 100보다 큰 경우 InvalidRangeException 발생")
        @Test
        public void should_RaiseInvalidRangeException_ForHwScoreMoreThan100pts() {
            double midScore = 80;
            double finalScore = 90;
            double hwScore = 195;
            Grader grader = new Grader();
            assertThrows(InvalidRangeException.class, () -> {
                grader.computeGrade(midScore, finalScore, hwScore);
            });
        }
    }

    @DisplayName("유효한 점수가 입력된 경우 테스트")
    @Nested
    class WhenValidScoresEntered {
        @DisplayName("총점이 90점이상이면 A")
        @Test
        public void should_GiveGradeOfA_ForStudentsWithMoreThan90pts() {
            double midScore = 92;
            double finalScore = 90;
            double hwScore = 95;

            Grader grader = new Grader();
            Grade actual = grader.computeGrade(midScore, finalScore, hwScore);

            assertEquals(Grade.A, actual, "Should be A");
        }

        @DisplayName("총점이 80점이상 90점 미만 B")
        @Test
        public void should_GiveGradeOfB_ForStudentsWithMoreThan80pts() {
            double midScore = 85;
            double finalScore = 80;
            double hwScore = 90;

            Grader grader = new Grader();
            Grade actual = grader.computeGrade(midScore, finalScore, hwScore);

            assertEquals(Grade.B, actual, "Should be B");
        }

        @DisplayName("총점이 70점이상 80점 미만 C")
        @Test
        public void should_GiveGradeOfC_ForStudentsWithMoreThan70pts() {
            double midScore = 77;
            double finalScore = 70;
            double hwScore = 75;

            Grader grader = new Grader();
            Grade actual = grader.computeGrade(midScore, finalScore, hwScore);

            assertEquals(Grade.C, actual, "Should be C");
        }

        @DisplayName("총점이 60점이상 70점 미만 D")
        @Test
        public void should_GiveGradeOfD_ForStudentsWithMoreThan60pts() {
            double midScore = 66;
            double finalScore = 60;
            double hwScore = 65;

            Grader grader = new Grader();
            Grade actual = grader.computeGrade(midScore, finalScore, hwScore);

            assertEquals(Grade.D, actual, "Should be D");
        }

        @DisplayName("총점이 60점미만 F")
        @Test
        public void should_GiveGradeOfF_ForStudentsWithLessThan60pts() {
            double midScore = 40;
            double finalScore = 53;
            double hwScore = 35;

            Grader grader = new Grader();
            Grade actual = grader.computeGrade(midScore, finalScore, hwScore);

            assertEquals(Grade.F, actual, "Should be F");
        }
    }
}

